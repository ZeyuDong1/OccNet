{"env_info": "sys.platform: linux\nPython: 3.7.16 (default, Jan 17 2023, 22:20:44) [GCC 11.2.0]\nCUDA available: True\nGPU 0: NVIDIA GeForce RTX 4090\nCUDA_HOME: /usr/local/cuda\nNVCC: Build cuda_11.3.r11.3/compiler.29920130_0\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.10.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.3\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.2\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.11.0\nOpenCV: 4.9.0\nMMCV: 1.4.1\nMMCV Compiler: GCC 7.5\nMMCV CUDA Compiler: 11.3\nMMDetection: 2.19.0\nMMSegmentation: 0.20.0\nMMDetection3D: 0.18.1+ce83e8a", "config": "point_cloud_range = [-50.0, -50.0, -5.0, 50.0, 50.0, 3.0]\nclass_names = [\n    'car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier',\n    'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n]\ndataset_type = 'CustomNuScenesDataset'\ndata_root = 'data/nuscenes/'\ninput_modality = dict(\n    use_lidar=False,\n    use_camera=True,\n    use_radar=False,\n    use_map=False,\n    use_external=True)\nfile_client_args = dict(backend='disk')\ntrain_pipeline = [\n    dict(type='LoadMultiViewImageFromFiles', to_float32=True),\n    dict(type='PhotoMetricDistortionMultiViewImage'),\n    dict(\n        type='LoadAnnotations3D',\n        with_bbox_3d=True,\n        with_label_3d=True,\n        with_attr_label=False),\n    dict(type='LoadOccupancyGT'),\n    dict(type='LoadFlowGT'),\n    dict(\n        type='ObjectRangeFilter',\n        point_cloud_range=[-50.0, -50.0, -5.0, 50.0, 50.0, 3.0]),\n    dict(\n        type='ObjectNameFilter',\n        classes=[\n            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n        ]),\n    dict(\n        type='NormalizeMultiviewImage',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='RandomScaleImageMultiViewImage', scales=[0.5]),\n    dict(type='PadMultiViewImage', size_divisor=32),\n    dict(\n        type='CustomDefaultFormatBundle3D',\n        class_names=[\n            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n        ]),\n    dict(\n        type='CustomCollect3D',\n        keys=['gt_bboxes_3d', 'gt_labels_3d', 'img', 'occ_gts', 'flow_gts'])\n]\ntest_pipeline = [\n    dict(type='LoadMultiViewImageFromFiles', to_float32=True),\n    dict(\n        type='LoadPointsFromFile',\n        coord_type='LIDAR',\n        load_dim=3,\n        use_dim=3,\n        file_client_args=dict(backend='disk')),\n    dict(\n        type='NormalizeMultiviewImage',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(\n        type='MultiScaleFlipAug3D',\n        img_scale=(1600, 900),\n        pts_scale_ratio=1,\n        flip=False,\n        transforms=[\n            dict(type='RandomScaleImageMultiViewImage', scales=[0.5]),\n            dict(type='PadMultiViewImage', size_divisor=32),\n            dict(\n                type='DefaultFormatBundle3D',\n                class_names=[\n                    'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n                    'barrier', 'motorcycle', 'bicycle', 'pedestrian',\n                    'traffic_cone'\n                ],\n                with_label=False),\n            dict(type='CustomCollect3D', keys=['img'])\n        ])\n]\neval_pipeline = [\n    dict(\n        type='LoadPointsFromFile',\n        coord_type='LIDAR',\n        load_dim=5,\n        use_dim=5,\n        file_client_args=dict(backend='disk')),\n    dict(\n        type='LoadPointsFromMultiSweeps',\n        sweeps_num=10,\n        file_client_args=dict(backend='disk')),\n    dict(\n        type='DefaultFormatBundle3D',\n        class_names=[\n            'car', 'truck', 'trailer', 'bus', 'construction_vehicle',\n            'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone', 'barrier'\n        ],\n        with_label=False),\n    dict(type='Collect3D', keys=['points'])\n]\ndata = dict(\n    samples_per_gpu=1,\n    workers_per_gpu=4,\n    train=dict(\n        type='CustomNuScenesDataset',\n        data_root='data/nuscenes/',\n        ann_file=\n        'data/occ_gt_release_v1_0/nuscenes_infos_temporal_train_occ_gt.pkl',\n        pipeline=[\n            dict(type='LoadMultiViewImageFromFiles', to_float32=True),\n            dict(type='PhotoMetricDistortionMultiViewImage'),\n            dict(\n                type='LoadAnnotations3D',\n                with_bbox_3d=True,\n                with_label_3d=True,\n                with_attr_label=False),\n            dict(type='LoadOccupancyGT'),\n            dict(type='LoadFlowGT'),\n            dict(\n                type='ObjectRangeFilter',\n                point_cloud_range=[-50.0, -50.0, -5.0, 50.0, 50.0, 3.0]),\n            dict(\n                type='ObjectNameFilter',\n                classes=[\n                    'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n                    'barrier', 'motorcycle', 'bicycle', 'pedestrian',\n                    'traffic_cone'\n                ]),\n            dict(\n                type='NormalizeMultiviewImage',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='RandomScaleImageMultiViewImage', scales=[0.5]),\n            dict(type='PadMultiViewImage', size_divisor=32),\n            dict(\n                type='CustomDefaultFormatBundle3D',\n                class_names=[\n                    'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n                    'barrier', 'motorcycle', 'bicycle', 'pedestrian',\n                    'traffic_cone'\n                ]),\n            dict(\n                type='CustomCollect3D',\n                keys=[\n                    'gt_bboxes_3d', 'gt_labels_3d', 'img', 'occ_gts',\n                    'flow_gts'\n                ])\n        ],\n        classes=[\n            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n        ],\n        modality=dict(\n            use_lidar=False,\n            use_camera=True,\n            use_radar=False,\n            use_map=False,\n            use_external=True),\n        test_mode=False,\n        box_type_3d='LiDAR',\n        use_valid_flag=True,\n        bev_size=(200, 200),\n        queue_length=3),\n    val=dict(\n        type='CustomNuScenesDataset',\n        ann_file=\n        'data/occ_gt_release_v1_0/nuscenes_infos_temporal_val_occ_gt.pkl',\n        pipeline=[\n            dict(type='LoadMultiViewImageFromFiles', to_float32=True),\n            dict(\n                type='LoadPointsFromFile',\n                coord_type='LIDAR',\n                load_dim=3,\n                use_dim=3,\n                file_client_args=dict(backend='disk')),\n            dict(\n                type='NormalizeMultiviewImage',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(\n                type='MultiScaleFlipAug3D',\n                img_scale=(1600, 900),\n                pts_scale_ratio=1,\n                flip=False,\n                transforms=[\n                    dict(type='RandomScaleImageMultiViewImage', scales=[0.5]),\n                    dict(type='PadMultiViewImage', size_divisor=32),\n                    dict(\n                        type='DefaultFormatBundle3D',\n                        class_names=[\n                            'car', 'truck', 'construction_vehicle', 'bus',\n                            'trailer', 'barrier', 'motorcycle', 'bicycle',\n                            'pedestrian', 'traffic_cone'\n                        ],\n                        with_label=False),\n                    dict(type='CustomCollect3D', keys=['img'])\n                ])\n        ],\n        classes=[\n            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n        ],\n        modality=dict(\n            use_lidar=False,\n            use_camera=True,\n            use_radar=False,\n            use_map=False,\n            use_external=True),\n        test_mode=True,\n        box_type_3d='LiDAR',\n        data_root='data/nuscenes/',\n        bev_size=(200, 200),\n        samples_per_gpu=1),\n    test=dict(\n        type='CustomNuScenesDataset',\n        data_root='data/nuscenes/',\n        ann_file=\n        'data/occ_gt_release_v1_0/nuscenes_infos_temporal_val_occ_gt.pkl',\n        pipeline=[\n            dict(type='LoadMultiViewImageFromFiles', to_float32=True),\n            dict(\n                type='LoadPointsFromFile',\n                coord_type='LIDAR',\n                load_dim=3,\n                use_dim=3,\n                file_client_args=dict(backend='disk')),\n            dict(\n                type='NormalizeMultiviewImage',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(\n                type='MultiScaleFlipAug3D',\n                img_scale=(1600, 900),\n                pts_scale_ratio=1,\n                flip=False,\n                transforms=[\n                    dict(type='RandomScaleImageMultiViewImage', scales=[0.5]),\n                    dict(type='PadMultiViewImage', size_divisor=32),\n                    dict(\n                        type='DefaultFormatBundle3D',\n                        class_names=[\n                            'car', 'truck', 'construction_vehicle', 'bus',\n                            'trailer', 'barrier', 'motorcycle', 'bicycle',\n                            'pedestrian', 'traffic_cone'\n                        ],\n                        with_label=False),\n                    dict(type='CustomCollect3D', keys=['img'])\n                ])\n        ],\n        classes=[\n            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n        ],\n        modality=dict(\n            use_lidar=False,\n            use_camera=True,\n            use_radar=False,\n            use_map=False,\n            use_external=True),\n        test_mode=True,\n        box_type_3d='LiDAR',\n        bev_size=(200, 200)),\n    shuffler_sampler=dict(type='DistributedGroupSampler'),\n    nonshuffler_sampler=dict(type='DistributedSampler'))\nevaluation = dict(\n    interval=1,\n    pipeline=[\n        dict(type='LoadMultiViewImageFromFiles', to_float32=True),\n        dict(\n            type='LoadPointsFromFile',\n            coord_type='LIDAR',\n            load_dim=3,\n            use_dim=3,\n            file_client_args=dict(backend='disk')),\n        dict(\n            type='NormalizeMultiviewImage',\n            mean=[123.675, 116.28, 103.53],\n            std=[58.395, 57.12, 57.375],\n            to_rgb=True),\n        dict(\n            type='MultiScaleFlipAug3D',\n            img_scale=(1600, 900),\n            pts_scale_ratio=1,\n            flip=False,\n            transforms=[\n                dict(type='RandomScaleImageMultiViewImage', scales=[0.5]),\n                dict(type='PadMultiViewImage', size_divisor=32),\n                dict(\n                    type='DefaultFormatBundle3D',\n                    class_names=[\n                        'car', 'truck', 'construction_vehicle', 'bus',\n                        'trailer', 'barrier', 'motorcycle', 'bicycle',\n                        'pedestrian', 'traffic_cone'\n                    ],\n                    with_label=False),\n                dict(type='CustomCollect3D', keys=['img'])\n            ])\n    ])\ncheckpoint_config = dict(interval=1)\nlog_config = dict(\n    interval=50,\n    hooks=[dict(type='TextLoggerHook'),\n           dict(type='TensorboardLoggerHook')])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nwork_dir = './work_dirs/bev_tiny_det_occ_flow'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nplugin = True\nplugin_dir = 'projects/mmdet3d_plugin/'\nvoxel_size = [0.2, 0.2, 8]\noccupancy_size = [0.5, 0.5, 0.5]\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\n_dim_ = 256\n_occupancy_dim_ = 32\n_pos_dim_ = 128\n_ffn_dim_ = 512\n_num_levels_ = 1\nbev_h_ = 200\nbev_w_ = 200\nqueue_length = 3\nmodel = dict(\n    type='BEVFormer',\n    use_grid_mask=True,\n    video_test_mode=True,\n    use_occ_gts=True,\n    only_det=False,\n    pretrained=dict(img='torchvision://resnet50'),\n    img_backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(3, ),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=False),\n        norm_eval=True,\n        style='pytorch'),\n    img_neck=dict(\n        type='FPN',\n        in_channels=[2048],\n        out_channels=256,\n        start_level=0,\n        add_extra_convs='on_output',\n        num_outs=1,\n        relu_before_extra_convs=True),\n    pts_bbox_head=dict(\n        type='BEVFormerOccupancyHead',\n        bev_h=200,\n        bev_w=200,\n        num_query=900,\n        num_classes=10,\n        in_channels=256,\n        sync_cls_avg_factor=True,\n        with_box_refine=True,\n        as_two_stage=False,\n        point_cloud_range=[-50.0, -50.0, -5.0, 50.0, 50.0, 3.0],\n        occupancy_size=[0.5, 0.5, 0.5],\n        occ_dims=32,\n        occupancy_classes=16,\n        transformer=dict(\n            type='PerceptionTransformer',\n            rotate_prev_bev=True,\n            use_shift=True,\n            use_can_bus=True,\n            embed_dims=256,\n            encoder=dict(\n                type='BEVFormerEncoder',\n                num_layers=3,\n                pc_range=[-50.0, -50.0, -5.0, 50.0, 50.0, 3.0],\n                num_points_in_pillar=4,\n                return_intermediate=False,\n                transformerlayers=dict(\n                    type='BEVFormerLayer',\n                    attn_cfgs=[\n                        dict(\n                            type='TemporalSelfAttention',\n                            embed_dims=256,\n                            num_levels=1),\n                        dict(\n                            type='SpatialCrossAttention',\n                            pc_range=[-50.0, -50.0, -5.0, 50.0, 50.0, 3.0],\n                            deformable_attention=dict(\n                                type='MSDeformableAttention3D',\n                                embed_dims=256,\n                                num_points=8,\n                                num_levels=1),\n                            embed_dims=256)\n                    ],\n                    feedforward_channels=512,\n                    ffn_dropout=0.1,\n                    operation_order=('self_attn', 'norm', 'cross_attn', 'norm',\n                                     'ffn', 'norm'))),\n            decoder=dict(\n                type='DetectionTransformerDecoder',\n                num_layers=6,\n                return_intermediate=True,\n                transformerlayers=dict(\n                    type='DetrTransformerDecoderLayer',\n                    attn_cfgs=[\n                        dict(\n                            type='MultiheadAttention',\n                            embed_dims=256,\n                            num_heads=8,\n                            dropout=0.1),\n                        dict(\n                            type='CustomMSDeformableAttention',\n                            embed_dims=256,\n                            num_levels=1)\n                    ],\n                    feedforward_channels=512,\n                    ffn_dropout=0.1,\n                    operation_order=('self_attn', 'norm', 'cross_attn', 'norm',\n                                     'ffn', 'norm')))),\n        bbox_coder=dict(\n            type='NMSFreeCoder',\n            post_center_range=[-61.2, -61.2, -10.0, 61.2, 61.2, 10.0],\n            pc_range=[-50.0, -50.0, -5.0, 50.0, 50.0, 3.0],\n            max_num=300,\n            voxel_size=[0.2, 0.2, 8],\n            num_classes=10),\n        positional_encoding=dict(\n            type='LearnedPositionalEncoding',\n            num_feats=128,\n            row_num_embed=200,\n            col_num_embed=200),\n        loss_cls=dict(\n            type='FocalLoss',\n            use_sigmoid=True,\n            gamma=2.0,\n            alpha=0.25,\n            loss_weight=2.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=0.25),\n        loss_iou=dict(type='GIoULoss', loss_weight=0.0),\n        loss_flow=dict(type='L1Loss', loss_weight=0.25),\n        loss_occupancy=dict(\n            type='FocalLoss',\n            use_sigmoid=True,\n            gamma=2.0,\n            alpha=0.25,\n            loss_weight=1.0)),\n    train_cfg=dict(\n        pts=dict(\n            grid_size=[512, 512, 1],\n            voxel_size=[0.2, 0.2, 8],\n            point_cloud_range=[-50.0, -50.0, -5.0, 50.0, 50.0, 3.0],\n            out_size_factor=4,\n            assigner=dict(\n                type='HungarianAssigner3D',\n                cls_cost=dict(type='FocalLossCost', weight=2.0),\n                reg_cost=dict(type='BBox3DL1Cost', weight=0.25),\n                iou_cost=dict(type='IoUCost', weight=0.0),\n                pc_range=[-50.0, -50.0, -5.0, 50.0, 50.0, 3.0]))))\noptimizer = dict(\n    type='AdamW',\n    lr=0.0002,\n    paramwise_cfg=dict(custom_keys=dict(img_backbone=dict(lr_mult=0.1))),\n    weight_decay=0.01)\noptimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))\nlr_config = dict(\n    policy='CosineAnnealing',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.3333333333333333,\n    min_lr_ratio=0.001)\ntotal_epochs = 24\nrunner = dict(type='EpochBasedRunner', max_epochs=24)\ngpu_ids = range(0, 1)\n", "seed": 0, "exp_name": "bev_tiny_det_occ_flow.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 8e-05, "memory": 7209, "data_time": 0.08475, "loss_cls": 1.70052, "loss_bbox": 1.90761, "loss_occupancy": 1.11868, "loss_flow": 0.85348, "d0.loss_cls": 1.74482, "d0.loss_bbox": 1.8222, "d1.loss_cls": 1.69665, "d1.loss_bbox": 1.85593, "d2.loss_cls": 1.65459, "d2.loss_bbox": 1.83641, "d3.loss_cls": 1.71767, "d3.loss_bbox": 1.85869, "d4.loss_cls": 1.69197, "d4.loss_bbox": 1.84527, "loss": 23.30449, "grad_norm": 65.8239, "time": 7.3057}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 9e-05, "memory": 7211, "data_time": 0.0082, "loss_cls": 1.48345, "loss_bbox": 1.76304, "loss_occupancy": 1.01214, "loss_flow": 0.59799, "d0.loss_cls": 1.47885, "d0.loss_bbox": 1.73837, "d1.loss_cls": 1.44107, "d1.loss_bbox": 1.68541, "d2.loss_cls": 1.43251, "d2.loss_bbox": 1.71958, "d3.loss_cls": 1.44838, "d3.loss_bbox": 1.73581, "d4.loss_cls": 1.43968, "d4.loss_bbox": 1.7338, "loss": 20.71008, "grad_norm": 53.50358, "time": 7.214}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00011, "memory": 7212, "data_time": 0.00782, "loss_cls": 1.46708, "loss_bbox": 1.67815, "loss_occupancy": 0.93677, "loss_flow": 0.56652, "d0.loss_cls": 1.46486, "d0.loss_bbox": 1.64628, "d1.loss_cls": 1.46018, "d1.loss_bbox": 1.71648, "d2.loss_cls": 1.46261, "d2.loss_bbox": 1.71043, "d3.loss_cls": 1.45378, "d3.loss_bbox": 1.7685, "d4.loss_cls": 1.45543, "d4.loss_bbox": 1.6783, "loss": 20.46537, "grad_norm": 58.05463, "time": 7.21625}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00012, "memory": 7212, "data_time": 0.00821, "loss_cls": 1.39489, "loss_bbox": 1.69826, "loss_occupancy": 0.88488, "loss_flow": 0.59991, "d0.loss_cls": 1.40242, "d0.loss_bbox": 1.66408, "d1.loss_cls": 1.39649, "d1.loss_bbox": 1.6489, "d2.loss_cls": 1.39055, "d2.loss_bbox": 1.69458, "d3.loss_cls": 1.39704, "d3.loss_bbox": 1.75842, "d4.loss_cls": 1.39517, "d4.loss_bbox": 1.67906, "loss": 20.00465, "grad_norm": 53.49715, "time": 7.21647}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.00013, "memory": 7212, "data_time": 0.00807, "loss_cls": 1.32579, "loss_bbox": 1.71823, "loss_occupancy": 0.8354, "loss_flow": 0.3728, "d0.loss_cls": 1.30649, "d0.loss_bbox": 1.61407, "d1.loss_cls": 1.32014, "d1.loss_bbox": 1.62309, "d2.loss_cls": 1.31394, "d2.loss_bbox": 1.6508, "d3.loss_cls": 1.32386, "d3.loss_bbox": 1.67718, "d4.loss_cls": 1.31301, "d4.loss_bbox": 1.76273, "loss": 19.15753, "grad_norm": 44.77575, "time": 7.22053}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.00015, "memory": 7212, "data_time": 0.00813, "loss_cls": 1.36617, "loss_bbox": 1.69389, "loss_occupancy": 0.78805, "loss_flow": 0.76969, "d0.loss_cls": 1.36023, "d0.loss_bbox": 1.63795, "d1.loss_cls": 1.36653, "d1.loss_bbox": 1.65118, "d2.loss_cls": 1.36118, "d2.loss_bbox": 1.67146, "d3.loss_cls": 1.35979, "d3.loss_bbox": 1.69341, "d4.loss_cls": 1.36839, "d4.loss_bbox": 1.68576, "loss": 19.77369, "grad_norm": 50.27617, "time": 7.21801}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.00016, "memory": 7212, "data_time": 0.00815, "loss_cls": 1.30522, "loss_bbox": 1.64239, "loss_occupancy": 0.75359, "loss_flow": 0.55104, "d0.loss_cls": 1.29664, "d0.loss_bbox": 1.59507, "d1.loss_cls": 1.30873, "d1.loss_bbox": 1.58492, "d2.loss_cls": 1.29633, "d2.loss_bbox": 1.65379, "d3.loss_cls": 1.3008, "d3.loss_bbox": 1.6183, "d4.loss_cls": 1.29846, "d4.loss_bbox": 1.70004, "loss": 18.90531, "grad_norm": 48.86566, "time": 7.2194}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.00017, "memory": 7212, "data_time": 0.00813, "loss_cls": 1.35273, "loss_bbox": 1.73733, "loss_occupancy": 0.70578, "loss_flow": 0.58637, "d0.loss_cls": 1.36252, "d0.loss_bbox": 1.58482, "d1.loss_cls": 1.3652, "d1.loss_bbox": 1.61396, "d2.loss_cls": 1.35732, "d2.loss_bbox": 1.62843, "d3.loss_cls": 1.34896, "d3.loss_bbox": 1.70181, "d4.loss_cls": 1.36782, "d4.loss_bbox": 1.61814, "loss": 19.33119, "grad_norm": 51.30907, "time": 7.20915}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 0.00019, "memory": 7212, "data_time": 0.00804, "loss_cls": 1.27527, "loss_bbox": 1.77662, "loss_occupancy": 0.66079, "loss_flow": 0.62427, "d0.loss_cls": 1.25866, "d0.loss_bbox": 1.56286, "d1.loss_cls": 1.27297, "d1.loss_bbox": 1.57215, "d2.loss_cls": 1.28044, "d2.loss_bbox": 1.61611, "d3.loss_cls": 1.27282, "d3.loss_bbox": 1.61652, "d4.loss_cls": 1.24568, "d4.loss_bbox": 1.89882, "loss": 18.93397, "grad_norm": 48.17815, "time": 7.21636}
